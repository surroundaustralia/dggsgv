#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class WKTBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(WKTBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class WKTParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=WKTBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(WKTParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _well_known_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._point_text_representation_()
            with self._option():
                self._curve_text_representation_()
            with self._option():
                self._surface_text_representation_()
            with self._option():
                self._collection_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _point_text_representation_(self):  # noqa
        self._token('POINT')
        with self._optional():
            self._z_m_()
        self._point_text_()

    @tatsumasu()
    def _curve_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._linestring_text_representation_()
            with self._option():
                self._circularstring_text_representation_()
            with self._option():
                self._compoundcurve_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _linestring_text_representation_(self):  # noqa
        self._token('LINESTRING')
        with self._optional():
            self._z_m_()
        self._linestring_text_body_()

    @tatsumasu()
    def _circularstring_text_representation_(self):  # noqa
        self._token('CIRCULARSTRING')
        with self._optional():
            self._z_m_()
        self._circularstring_text_()

    @tatsumasu()
    def _compoundcurve_text_representation_(self):  # noqa
        self._token('COMPOUNDCURVE')
        with self._optional():
            self._z_m_()
        self._compoundcurve_text_()

    @tatsumasu()
    def _surface_text_representation_(self):  # noqa
        self._curvepolygon_text_representation_()

    @tatsumasu()
    def _curvepolygon_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('CURVEPOLYGON')
                with self._optional():
                    self._z_m_()
                self._curvepolygon_text_body_()
            with self._option():
                self._polygon_text_representation_()
            with self._option():
                self._triangle_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _polygon_text_representation_(self):  # noqa
        self._token('POLYGON')
        with self._optional():
            self._z_m_()
        self._polygon_text_body_()

    @tatsumasu()
    def _triangle_text_representation_(self):  # noqa
        self._token('TRIANGLE')
        with self._optional():
            self._z_m_()
        self._triangle_text_body_()

    @tatsumasu()
    def _collection_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._multipoint_text_representation_()
            with self._option():
                self._multicurve_text_representation_()
            with self._option():
                self._multisurface_text_representation_()
            with self._option():
                self._geometrycollection_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _multipoint_text_representation_(self):  # noqa
        self._token('MULTIPOINT')
        with self._optional():
            self._z_m_()
        self._multipoint_text_()

    @tatsumasu()
    def _multicurve_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('MULTICURVE')
                with self._optional():
                    self._z_m_()
                self._multicurve_text_()
            with self._option():
                self._multilinestring_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _multilinestring_text_representation_(self):  # noqa
        self._token('MULTILINESTRING')
        with self._optional():
            self._z_m_()
        self._multilinestring_text_()

    @tatsumasu()
    def _multisurface_text_representation_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('MULTISURFACE')
                with self._optional():
                    self._z_m_()
                self._multisurface_text_()
            with self._option():
                self._multipolygon_text_representation_()
            with self._option():
                self._polyhedralsurface_text_representation_()
            with self._option():
                self._tin_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _multipolygon_text_representation_(self):  # noqa
        self._token('MULTIPOLYGON')
        with self._optional():
            self._z_m_()
        self._multipolygon_text_()

    @tatsumasu()
    def _polyhedralsurface_text_representation_(self):  # noqa
        self._token('POLYHEDRALSURFACE')
        with self._optional():
            self._z_m_()
        self._polyhedralsurface_text_()

    @tatsumasu()
    def _tin_text_representation_(self):  # noqa
        self._token('TIN')
        with self._optional():
            self._z_m_()
        self._tin_text_()

    @tatsumasu()
    def _geometrycollection_text_representation_(self):  # noqa
        self._token('GEOMETRYCOLLECTION')
        with self._optional():
            self._z_m_()
        self._geometrycollection_text_()

    @tatsumasu()
    def _linestring_text_body_(self):  # noqa
        self._linestring_text_()

    @tatsumasu()
    def _curvepolygon_text_body_(self):  # noqa
        self._curvepolygon_text_()

    @tatsumasu()
    def _polygon_text_body_(self):  # noqa
        self._polygon_text_()

    @tatsumasu()
    def _triangle_text_body_(self):  # noqa
        self._triangle_text_()

    @tatsumasu()
    def _point_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._point_()
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _point_(self):  # noqa
        self._x_()
        self._y_()
        with self._optional():
            self._z_()
        with self._optional():
            self._m_()

    @tatsumasu()
    def _x_(self):  # noqa
        self._number_()

    @tatsumasu()
    def _y_(self):  # noqa
        self._number_()

    @tatsumasu()
    def _z_(self):  # noqa
        self._number_()

    @tatsumasu()
    def _m_(self):  # noqa
        self._number_()

    @tatsumasu()
    def _linestring_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._point_()

                def block0():
                    self._comma_()
                    self._point_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _circularstring_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._point_()

                def block0():
                    self._comma_()
                    self._point_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _compoundcurve_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._single_curve_text_()

                def block0():
                    self._comma_()
                    self._single_curve_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _single_curve_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._linestring_text_body_()
            with self._option():
                self._circularstring_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _curve_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._linestring_text_body_()
            with self._option():
                self._circularstring_text_representation_()
            with self._option():
                self._compoundcurve_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _ring_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._linestring_text_body_()
            with self._option():
                self._circularstring_text_representation_()
            with self._option():
                self._compoundcurve_text_representation_()
            self._error('no available options')

    @tatsumasu()
    def _surface_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('CURVEPOLYGON')
                self._curvepolygon_text_body_()
            with self._option():
                self._polygon_text_body_()
            self._error('no available options')

    @tatsumasu()
    def _curvepolygon_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._ring_text_()

                def block0():
                    self._comma_()
                    self._ring_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _polygon_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._linestring_text_()

                def block0():
                    self._comma_()
                    self._linestring_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _triangle_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._linestring_text_()
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _multipoint_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._point_text_()

                def block0():
                    self._comma_()
                    self._point_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _multicurve_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._curve_text_()

                def block0():
                    self._comma_()
                    self._curve_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _multilinestring_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._linestring_text_body_()

                def block0():
                    self._comma_()
                    self._linestring_text_body_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _multisurface_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._surface_text_()

                def block0():
                    self._comma_()
                    self._surface_text_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _multipolygon_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._polygon_text_body_()

                def block0():
                    self._comma_()
                    self._polygon_text_body_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _polyhedralsurface_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._polygon_text_body_()

                def block0():
                    self._comma_()
                    self._polygon_text_body_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _tin_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._triangle_text_body_()

                def block0():
                    self._comma_()
                    self._triangle_text_body_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _geometrycollection_text_(self):  # noqa
        with self._choice():
            with self._option():
                self._empty_set_()
            with self._option():
                self._left_paren_()
                self._well_known_text_representation_()

                def block0():
                    self._comma_()
                    self._well_known_text_representation_()
                self._closure(block0)
                self._right_paren_()
            self._error('no available options')

    @tatsumasu()
    def _empty_set_(self):  # noqa
        self._token('EMPTY')

    @tatsumasu()
    def _z_m_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('ZM')
            with self._option():
                self._token('Z')
            with self._option():
                self._token('M')
            self._error('no available options')

    @tatsumasu()
    def _left_paren_(self):  # noqa
        self._token('(')

    @tatsumasu()
    def _right_paren_(self):  # noqa
        self._token(')')

    @tatsumasu()
    def _number_(self):  # noqa
        self._pattern('[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?')

    @tatsumasu()
    def _comma_(self):  # noqa
        self._token(',')


class WKTSemantics(object):
    def well_known_text_representation(self, ast):  # noqa
        return ast

    def point_text_representation(self, ast):  # noqa
        return ast

    def curve_text_representation(self, ast):  # noqa
        return ast

    def linestring_text_representation(self, ast):  # noqa
        return ast

    def circularstring_text_representation(self, ast):  # noqa
        return ast

    def compoundcurve_text_representation(self, ast):  # noqa
        return ast

    def surface_text_representation(self, ast):  # noqa
        return ast

    def curvepolygon_text_representation(self, ast):  # noqa
        return ast

    def polygon_text_representation(self, ast):  # noqa
        return ast

    def triangle_text_representation(self, ast):  # noqa
        return ast

    def collection_text_representation(self, ast):  # noqa
        return ast

    def multipoint_text_representation(self, ast):  # noqa
        return ast

    def multicurve_text_representation(self, ast):  # noqa
        return ast

    def multilinestring_text_representation(self, ast):  # noqa
        return ast

    def multisurface_text_representation(self, ast):  # noqa
        return ast

    def multipolygon_text_representation(self, ast):  # noqa
        return ast

    def polyhedralsurface_text_representation(self, ast):  # noqa
        return ast

    def tin_text_representation(self, ast):  # noqa
        return ast

    def geometrycollection_text_representation(self, ast):  # noqa
        return ast

    def linestring_text_body(self, ast):  # noqa
        return ast

    def curvepolygon_text_body(self, ast):  # noqa
        return ast

    def polygon_text_body(self, ast):  # noqa
        return ast

    def triangle_text_body(self, ast):  # noqa
        return ast

    def point_text(self, ast):  # noqa
        return ast

    def point(self, ast):  # noqa
        return ast

    def x(self, ast):  # noqa
        return ast

    def y(self, ast):  # noqa
        return ast

    def z(self, ast):  # noqa
        return ast

    def m(self, ast):  # noqa
        return ast

    def linestring_text(self, ast):  # noqa
        return ast

    def circularstring_text(self, ast):  # noqa
        return ast

    def compoundcurve_text(self, ast):  # noqa
        return ast

    def single_curve_text(self, ast):  # noqa
        return ast

    def curve_text(self, ast):  # noqa
        return ast

    def ring_text(self, ast):  # noqa
        return ast

    def surface_text(self, ast):  # noqa
        return ast

    def curvepolygon_text(self, ast):  # noqa
        return ast

    def polygon_text(self, ast):  # noqa
        return ast

    def triangle_text(self, ast):  # noqa
        return ast

    def multipoint_text(self, ast):  # noqa
        return ast

    def multicurve_text(self, ast):  # noqa
        return ast

    def multilinestring_text(self, ast):  # noqa
        return ast

    def multisurface_text(self, ast):  # noqa
        return ast

    def multipolygon_text(self, ast):  # noqa
        return ast

    def polyhedralsurface_text(self, ast):  # noqa
        return ast

    def tin_text(self, ast):  # noqa
        return ast

    def geometrycollection_text(self, ast):  # noqa
        return ast

    def empty_set(self, ast):  # noqa
        return ast

    def z_m(self, ast):  # noqa
        return ast

    def left_paren(self, ast):  # noqa
        return ast

    def right_paren(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def comma(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'well_known_text_representation'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = WKTParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, WKTParser, name='WKT')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

